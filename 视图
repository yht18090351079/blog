获取视图
最后更新于 2024-11-13
根据视图 ID 获取现有视图信息，包括视图名称、类型、属性等。
尝试一下

请求
基本	
HTTP URL	
https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id

HTTP Method	
GET

接口频率限制	
20 次/秒

支持的应用类型	
自建应用
商店应用

权限要求 
开启任一权限即可
检索视图
查看、评论、编辑和管理多维表格
查看、评论和导出多维表格
请求头
名称	类型	必填	描述
Authorization

string

是

应用调用 API 时，需要通过访问凭证（access_token）进行身份鉴权，不同类型的访问凭证可获取的数据范围不同，参考 选择并获取访问凭证 。

值格式："Bearer access_token"

可选值如下：

tenant_access_token
以应用身份调用 API，可读写的数据范围由应用自身的 数据权限范围决定。参考 自建应用获取 tenant_access_token 或 商店应用获取 tenant_access_token 。示例值："Bearer t-g1044qeGEDXTB6NDJOGV4JQCYDGHRBARFTGT1234"

user_access_token
以登录用户身份调用 API，可读写的数据范围由用户可读写的数据范围决定。参考 获取 user_access_token。示例值："Bearer u-cjz1eKCEx289x1TXEiQJqAh5171B4gDHPq00l0GE1234"

Content-Type

string

是

固定值："application/json; charset=utf-8"

路径参数
名称
类型
描述
app_token

string

多维表格 App 的唯一标识。不同形态的多维表格，其 app_token 的获取方式不同：

如果多维表格的 URL 以 feishu.cn/base 开头，该多维表格的 app_token 是下图高亮部分：app_token.png

如果多维表格的 URL 以 feishu.cn/wiki 开头，你需调用知识库相关获取知识空间节点信息接口获取多维表格的 app_token。当 obj_type 的值为 bitable 时，obj_token 字段的值才是多维表格的 app_token。

了解更多，参考多维表格 app_token 获取方式。

示例值："bascnCMII2ORej2RItqpZZUNMIe"

数据校验规则：

最小长度：1 字符
table_id

string

多维表格数据表的唯一标识。获取方式：

你可通过多维表格 URL 获取 table_id，下图高亮部分即为当前数据表的 table_id

也可通过列出数据表接口获取 table_id



示例值："tblsRc9GRRXKqhvW"

view_id

string

多维表格中视图的唯一标识。获取方式：

在多维表格的 URL 地址栏中，view_id 是下图中高亮部分：view_id.png
通过列出视图接口获取。暂时无法获取到嵌入到云文档中的多维表格的 view_id。
注意：当 filter 参数 或 sort 参数不为空时，请求视为对数据表中的全部数据做条件过滤，指定的 view_id 会被忽略。

示例值："vewTpR1urY"

请求示例
// node-sdk使用说明：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/server-side-sdk/nodejs-sdk/preparation-before-development
// 以下示例代码默认根据文档示例值填充，如果存在代码问题，请在 API 调试台填上相关必要参数后再复制代码使用
const lark = require('@larksuiteoapi/node-sdk');

// 开发者复制该Demo后，需要修改Demo里面的"app id", "app secret"为自己应用的appId, appSecret
const client = new lark.Client({
    appId: 'app id',
    appSecret: 'app secret',
    // disableTokenCache为true时，SDK不会主动拉取并缓存token，这时需要在发起请求时，调用lark.withTenantToken("token")手动传递
    // disableTokenCache为false时，SDK会自动管理租户token的获取与刷新，无需使用lark.withTenantToken("token")手动传递token
    disableTokenCache: true
});

client.bitable.v1.appTableView.get({
        path: {
                app_token:'bascnCMII2ORej2RItqpZZUNMIe',
                table_id:'tblsRc9GRRXKqhvW',
                view_id:'vewTpR1urY',
        },
},
    lark.withTenantToken("t-7f1b******8e560")
).then(res => {
    console.log(res);
}).catch(e => {
    console.error(JSON.stringify(e.response.data, null, 4));
});
响应
响应体
名称
类型
描述
code

int

错误码，非 0 表示失败

msg

string

错误描述

data

-

-

响应体示例
{
    "code": 0,
    "msg": "success",
    "data": {
        "view": {
            "view_id": "vewsOleexJ",
            "view_name": "grid",
            "view_type": "grid",
            "property": {
                "filter_info": {
                    "condition_omitted": null,
                    "conditions": [
                        {
                            "condition_id": "conuKMQNNg",
                            "field_id": "fldVioUai1",
                            "field_type": 1,
                            "operator": "is",
                            "value": "[\"text content\"]"
                        }
                    ],
                    "conjunction": "and"
                },
                "hidden_fields": null
            }
        }
    }
}